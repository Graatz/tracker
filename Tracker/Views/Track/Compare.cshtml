@model Tracker.Models.CompareViewModel
@{
    ViewBag.Title = "Track comparison";
}

<div class="panel-group">
    <div class="panel50">
        <div class="track-info">
            <div class="track-info-row">
                <p><span>Trasa: @Html.ActionLink(Model.Track1.Name, "Details", new { id = Model.Track1.Id }, null)</span></p>
            </div>
            <div class="track-info-row">
                <p><span>Średnia prędkość:</span> @Model.Track1.AvarageSpeed</p>
            </div>
            <div class="track-info-row">
                <p><span>Data dodania:</span> @Model.Track1.UploadDate</p>
            </div>
        </div>
        <div id="map1" class="compare-map"></div>
    </div>
    <div class="panel50">
        <div class="track-info">
            <div class="track-info-row">
                <p><span>Trasa: @Html.ActionLink(Model.Track2.Name, "Details", new { id = Model.Track2.Id }, null)</span></p>
            </div>
            <div class="track-info-row">
                <p><span>Średnia prędkość:</span> @Model.Track2.AvarageSpeed</p>
            </div>
            <div class="track-info-row">
                <p><span>Data dodania:</span> @Model.Track2.UploadDate</p>
            </div>
        </div>
        <div id="map2" class="compare-map"></div>
    </div>
</div>

@section Scripts
{
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"
            integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw=="
            crossorigin="">
    </script>
    <script>
        initMaps();

        function initMaps() {
            let segments1 = @Html.Raw(Json.Encode(Model.Segments1));
            let segments2 = @Html.Raw(Json.Encode(Model.Segments2));

            let segments3 = new Array();
            segments3.push(segments2[5]);

            let mapBounds = initSegments(segments2, 'map2', 'blue');
            initMap(segments1[0], 'map1', 'red', mapBounds);
        }

        function initSegments(segments, mapId, color, bounds) {
            let map = L.map(mapId);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a>',
                maxZoom: 18,
            }).addTo(map);

            let trackPoints = new Array();

            for (let i = 0; i < segments.length; i++) {
                let data = segments[i];
                let segmentPoints = new Array();
                    
                for (let i = 0; i < data.length; i++) {
                    let obj = data[i];
                    segmentPoints.push(new L.LatLng(obj.Latitude, obj.Longitude));
                }

                trackPoints.push(segmentPoints);
            }

            let polyline = L.polyline(trackPoints, { color: color }).addTo(map);
            map.fitBounds(polyline.getBounds());

            return polyline.getBounds();
        }

        function initMap(trackData, mapId, color, bounds) {
            let data = trackData;

            var trackCoordinates = new Array();

            for (var i = 0; i < data.length; i++) {
                let obj = data[i];
                trackCoordinates.push(new L.LatLng(obj.Latitude, obj.Longitude));
            }
            var map = L.map(mapId).setView([51.505, -0.09], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a>',
                maxZoom: 18,
            }).addTo(map);

            var polyline = L.polyline(trackCoordinates, { color: color }).addTo(map);
            map.fitBounds(bounds);

            let startMarker = L.marker(trackCoordinates[0]).addTo(map);
            let endMarker = L.marker(trackCoordinates[trackCoordinates.length - 1]).addTo(map);
        }
    </script>
}